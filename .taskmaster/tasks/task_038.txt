# Task ID: 38
# Title: Create Service Management Use Cases - ServiceInitializationUseCase, PermissionManagementUseCase, and ServiceBindingUseCase
# Status: pending
# Dependencies: 5, 7, 8, 10, 11
# Priority: high
# Description: Build three comprehensive use cases to encapsulate ALL service binding, permission management, and service initialization logic currently polluting AudioRecordingViewModel lines 130-181.
# Details:
Create ServiceInitializationUseCase to handle service binding logic (lines 130-158) that currently works with AudioServiceManager.ServiceBindResult infrastructure types. This use case must encapsulate service connection, binding state management, and error handling while returning domain models instead of infrastructure types. Create PermissionManagementUseCase to handle permission request workflows (lines 160-181) that currently work with PermissionHandler.PermissionResult infrastructure types. This use case must manage all permission states, rationale flows, and permission validation while returning domain representations. Create ServiceBindingUseCase to coordinate service binding with permission checks and provide unified service readiness state. These use cases must follow existing patterns: suspend operator fun invoke(), Result<T> return types, proper error handling, and domain model mapping. Create new domain models for ServiceConnectionStatus, PermissionStatus, and ServiceReadinessState to replace infrastructure types. Update AudioRecordingViewModel to use these use cases instead of directly handling ServiceBindResult or PermissionResult types. Implement comprehensive state mapping from infrastructure types (ServiceConnectionState, PermissionState, ServiceBindResult, PermissionResult) to clean domain representations. Include proper dependency injection setup and comprehensive error recovery mechanisms.

# Test Strategy:
Create unit tests for each use case verifying proper domain model mapping from infrastructure types. Test all service binding scenarios (success, failure, already bound, errors) and ensure infrastructure types never leak to domain layer. Test permission workflows including granted, denied, rationale scenarios with proper domain model responses. Create integration tests verifying AudioRecordingViewModel no longer handles infrastructure types directly. Verify service readiness coordination between binding and permissions works correctly. Test error scenarios and recovery mechanisms. Mock AudioServiceManager and PermissionHandler to verify proper abstraction layers. Ensure all existing ViewModel functionality remains intact after refactoring.
