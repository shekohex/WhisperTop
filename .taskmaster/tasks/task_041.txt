# Task ID: 41
# Title: Refactor ViewModel State Management - Separate UI State from Domain State
# Status: pending
# Dependencies: 3, 10
# Priority: medium
# Description: Clean up AudioRecordingUiState by separating domain concerns from UI concerns, implementing proper WorkflowState to UiState transformations, and reducing ViewModel infrastructure dependencies.
# Details:
PHASE 1 - Create Clean Presentation Models: Create AudioFilePresentationModel with UI-formatted data (duration string, file size text, validity status) to replace direct AudioFile usage. Create TranscriptionDisplayModel with preview text truncation and insertion status for UI display. Define clean RecordingStatus enum (Idle, Recording, Processing, InsertingText, Success, Error) for pure UI state representation. PHASE 2 - Implement State Mapping Layer: Create WorkflowState.toUiState() extension function to transform domain WorkflowState to clean AudioRecordingUiState. Implement domain model to presentation model mappers (AudioFile → AudioFilePresentationModel, TranscriptionResult → TranscriptionDisplayModel). Add error message transformation from domain errors to user-friendly display messages. PHASE 3 - Refactor AudioRecordingViewModel: Remove 5 infrastructure dependencies (AudioServiceManager, PermissionHandler, SettingsRepository, TextInsertionService, Context), keep only TranscriptionWorkflowUseCase. Replace complex state combination logic (lines 386-398) with single workflowState.collect transformation. Move all business logic (100+ lines) from ViewModel to appropriate domain use cases. Reduce ViewModel from 398 lines to approximately 100 lines focusing purely on UI state management. PHASE 4 - Create Missing Domain Use Cases: Implement ServiceManagementUseCase to handle service binding, connection state, and permission management abstractly. Update TranscriptionWorkflowUseCase to be the single source of truth for workflow state, ensuring it properly orchestrates the complete recording-to-transcription-to-insertion workflow. Create proper domain events for state transitions instead of direct UI state manipulation.

# Test Strategy:
Unit test new presentation model mappers with various domain model inputs including edge cases (null values, empty strings, large files). Test WorkflowState.toUiState() transformation function with all possible workflow states ensuring UI state correctness. Mock TranscriptionWorkflowUseCase in ViewModel tests to verify clean state observation and UI state updates. Integration test complete workflow to ensure domain-to-UI state transformation maintains existing functionality. Test ViewModel with various WorkflowState sequences to verify UI state consistency. Verify no business logic remains in ViewModel through code review and testing. Test that UI components still receive correct state for rendering after refactoring.
