# fastlane/Fastfile

default_platform(:android)

platform :android do
  before_all do
    # Decode the keystore from the base64 secret
    sh("echo $RELEASE_KEYSTORE_BASE64 | base64 --decode > ../composeApp/release.jks")

    # Set environment variables for Gradle signing
    ENV["KEYSTORE_FILE"] = "release.jks"
    ENV["KEYSTORE_PASSWORD"] = ENV["RELEASE_KEYSTORE_PASSWORD"]
    ENV["KEY_ALIAS"] = ENV["RELEASE_KEY_ALIAS"]
    ENV["KEY_PASSWORD"] = ENV["RELEASE_KEY_PASSWORD"]
  end

  desc "Builds and releases a nightly pre-release"
  lane :nightly do
    # Get the short commit hash
    commit_hash = sh("git rev-parse --short HEAD").strip

    # Generate a version name with the commit hash
    version_name = "nightly-#{commit_hash}"
    ENV["VERSION_NAME"] = version_name

    # Build the APKs
    gradle(
      task: "clean assemblePlaystoreRelease assembleSideloadRelease"
    )

    # Generate changelog from commits since last tag
    changelog = changelog_from_git_commits(
      pretty: "- %s",
      match_lightweight_tag: false
    )

    # Find all generated APKs (handles ABI splits and custom naming)
    puts "=== APK Discovery Debug (Nightly) ==="
    puts "Current working directory: #{Dir.pwd}"
    puts "Looking for APK files..."
    
    # First, let's see what's in the build directory
    build_dir = "composeApp/build/outputs/apk"
    if Dir.exist?(build_dir)
      puts "✓ Build directory exists: #{build_dir}"
      all_files = Dir["#{build_dir}/**/*"]
      puts "All files in build directory:"
      all_files.each { |f| puts "  #{f}" }
    else
      puts "✗ Build directory does not exist: #{build_dir}"
    end
    
    # Find APK files using multiple patterns
    apk_patterns = [
      "composeApp/build/outputs/apk/**/*.apk",
      "composeApp/build/outputs/apk/**/release/*.apk",
      "composeApp/build/outputs/apk/playstore/release/*.apk",
      "composeApp/build/outputs/apk/sideload/release/*.apk"
    ]
    
    apk_files = []
    apk_patterns.each do |pattern|
      found = Dir[pattern]
      puts "Pattern '#{pattern}' found #{found.length} files:"
      found.each { |f| puts "  - #{f}" }
      apk_files.concat(found)
    end
    
    # Filter for release builds only
    apk_files = apk_files.select { |f| 
      f.include?("release") && (f.include?("playstore") || f.include?("sideload"))
    }.uniq
    
    puts "=== Final APK List ==="
    puts "Total APK files to upload: #{apk_files.length}"
    apk_files.each { |apk| 
      puts "  - #{apk} (#{File.exist?(apk) ? 'EXISTS' : 'NOT FOUND'} - #{File.exist?(apk) ? "#{(File.size(apk) / 1024.0 / 1024.0).round(2)} MB" : 'N/A'})"
    }
    puts "=========================="

    # Create GitHub pre-release
    set_github_release(
      repository_name: ENV["GITHUB_REPOSITORY"],
      api_bearer: ENV["GITHUB_TOKEN"],
      name: "Nightly Build #{version_name}",
      tag_name: "nightly-#{Time.now.strftime('%Y-%m-%d-%H-%M-%S')}",
      description: changelog,
      is_prerelease: true,
      upload_assets: apk_files
    )
  end

  desc "Builds and releases a stable version"
  lane :release do
    # Get the version from the tag
    tag = ENV["GITHUB_REF_NAME"]
    ENV["VERSION_NAME"] = tag

    # Build the APKs
    gradle(
      task: "clean assemblePlaystoreRelease assembleSideloadRelease"
    )

    # Generate changelog from commits since last tag
    changelog = changelog_from_git_commits(
      pretty: "- %s",
      match_lightweight_tag: false
    )

    # Find all generated APKs (handles ABI splits and custom naming)
    puts "=== APK Discovery Debug (Release) ==="
    puts "Current working directory: #{Dir.pwd}"
    puts "Looking for APK files..."
    
    # First, let's see what's in the build directory
    build_dir = "composeApp/build/outputs/apk"
    if Dir.exist?(build_dir)
      puts "✓ Build directory exists: #{build_dir}"
      all_files = Dir["#{build_dir}/**/*"]
      puts "All files in build directory:"
      all_files.each { |f| puts "  #{f}" }
    else
      puts "✗ Build directory does not exist: #{build_dir}"
    end
    
    # Find APK files using multiple patterns
    apk_patterns = [
      "composeApp/build/outputs/apk/**/*.apk",
      "composeApp/build/outputs/apk/**/release/*.apk",
      "composeApp/build/outputs/apk/playstore/release/*.apk",
      "composeApp/build/outputs/apk/sideload/release/*.apk"
    ]
    
    apk_files = []
    apk_patterns.each do |pattern|
      found = Dir[pattern]
      puts "Pattern '#{pattern}' found #{found.length} files:"
      found.each { |f| puts "  - #{f}" }
      apk_files.concat(found)
    end
    
    # Filter for release builds only
    apk_files = apk_files.select { |f| 
      f.include?("release") && (f.include?("playstore") || f.include?("sideload"))
    }.uniq
    
    puts "=== Final APK List ==="
    puts "Total APK files to upload: #{apk_files.length}"
    apk_files.each { |apk| 
      puts "  - #{apk} (#{File.exist?(apk) ? 'EXISTS' : 'NOT FOUND'} - #{File.exist?(apk) ? "#{(File.size(apk) / 1024.0 / 1024.0).round(2)} MB" : 'N/A'})"
    }
    puts "=========================="

    # Create GitHub release
    set_github_release(
      repository_name: ENV["GITHUB_REPOSITORY"],
      api_bearer: ENV["GITHUB_TOKEN"],
      name: "Release #{tag}",
      tag_name: tag,
      description: changelog,
      is_prerelease: false,
      upload_assets: apk_files
    )
  end
end
