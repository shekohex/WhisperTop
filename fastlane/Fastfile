# fastlane/Fastfile

default_platform(:android)

platform :android do
  before_all do
    # Decode the keystore from the base64 secret
    sh("echo $RELEASE_KEYSTORE_BASE64 | base64 --decode > ../composeApp/release.jks")

    # Set environment variables for Gradle signing
    ENV["KEYSTORE_FILE"] = "release.jks"
    ENV["KEYSTORE_PASSWORD"] = ENV["RELEASE_KEYSTORE_PASSWORD"]
    ENV["KEY_ALIAS"] = ENV["RELEASE_KEY_ALIAS"]
    ENV["KEY_PASSWORD"] = ENV["RELEASE_KEY_PASSWORD"]
  end

  desc "Builds and releases a nightly pre-release"
  lane :nightly do
    # Get the short commit hash
    commit_hash = sh("git rev-parse --short HEAD").strip

    # Generate a version name with the commit hash
    version_name = "nightly-#{commit_hash}"
    ENV["VERSION_NAME"] = version_name

    # Build the APKs
    puts "=== Starting Gradle Build (Nightly) ==="
    gradle(
      task: "clean assemblePlaystoreRelease assembleSideloadRelease"
    )
    puts "✓ Gradle build completed"

    # Generate changelog from commits since last tag
    changelog = changelog_from_git_commits(
      pretty: "- %s",
      match_lightweight_tag: false
    )

    # Use Gradle's SharedValue for APK output paths
    puts "=== Using GRADLE_ALL_APK_OUTPUT_PATHS SharedValue ==="
    apk_files = lane_context[SharedValues::GRADLE_ALL_APK_OUTPUT_PATHS]
    
    if apk_files && !apk_files.empty?
      puts "Found #{apk_files.length} APK files from Gradle SharedValues:"
      apk_files.each { |apk| 
        relative_path = apk.gsub(ENV['GITHUB_WORKSPACE'] + '/', '') if ENV['GITHUB_WORKSPACE']
        relative_path ||= apk.gsub(Dir.pwd + '/', '')
        puts "  - #{relative_path} (#{File.exist?(apk) ? 'EXISTS' : 'NOT FOUND'} - #{File.exist?(apk) ? "#{(File.size(apk) / 1024.0 / 1024.0).round(2)} MB" : 'N/A'})"
      }
    else
      puts "✗ GRADLE_ALL_APK_OUTPUT_PATHS SharedValue not found, falling back to glob pattern"
      apk_files = Dir["composeApp/build/outputs/apk/**/whisper-top-*.apk"]
      puts "Found #{apk_files.length} APK files via glob pattern:"
      apk_files.each { |f| puts "  - #{f}" }
    end
    puts "=========================="

    # Create GitHub pre-release
    set_github_release(
      repository_name: ENV["GITHUB_REPOSITORY"],
      api_bearer: ENV["GITHUB_TOKEN"],
      name: "Nightly Build #{version_name}",
      tag_name: "nightly-#{Time.now.strftime('%Y-%m-%d-%H-%M-%S')}",
      description: changelog,
      is_prerelease: true,
      upload_assets: apk_files
    )
  end

  desc "Builds and releases a stable version"
  lane :release do
    # Get the version from the tag
    tag = ENV["GITHUB_REF_NAME"]
    ENV["VERSION_NAME"] = tag

    # Build the APKs
    puts "=== Starting Gradle Build (Release) ==="
    gradle(
      task: "clean assemblePlaystoreRelease assembleSideloadRelease"
    )
    puts "✓ Gradle build completed"

    # Generate changelog from commits since last tag
    changelog = changelog_from_git_commits(
      pretty: "- %s",
      match_lightweight_tag: false
    )

    # Use Gradle's SharedValue for APK output paths  
    puts "=== Using GRADLE_ALL_APK_OUTPUT_PATHS SharedValue ==="
    apk_files = lane_context[SharedValues::GRADLE_ALL_APK_OUTPUT_PATHS]
    
    if apk_files && !apk_files.empty?
      puts "Found #{apk_files.length} APK files from Gradle SharedValues:"
      apk_files.each { |apk| 
        relative_path = apk.gsub(ENV['GITHUB_WORKSPACE'] + '/', '') if ENV['GITHUB_WORKSPACE']
        relative_path ||= apk.gsub(Dir.pwd + '/', '')
        puts "  - #{relative_path} (#{File.exist?(apk) ? 'EXISTS' : 'NOT FOUND'} - #{File.exist?(apk) ? "#{(File.size(apk) / 1024.0 / 1024.0).round(2)} MB" : 'N/A'})"
      }
    else
      puts "✗ GRADLE_ALL_APK_OUTPUT_PATHS SharedValue not found, falling back to glob pattern"
      apk_files = Dir["composeApp/build/outputs/apk/**/whisper-top-*.apk"]
      puts "Found #{apk_files.length} APK files via glob pattern:"
      apk_files.each { |f| puts "  - #{f}" }
    end
    puts "=========================="

    # Create GitHub release
    set_github_release(
      repository_name: ENV["GITHUB_REPOSITORY"],
      api_bearer: ENV["GITHUB_TOKEN"],
      name: "Release #{tag}",
      tag_name: tag,
      description: changelog,
      is_prerelease: false,
      upload_assets: apk_files
    )
  end
end